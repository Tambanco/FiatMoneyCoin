//
//  FiatPresenter.swift
//  FiatMoneyCoin
//
//  Created tambanco ðŸ¥³ on 28.06.2022.
//
//  Template generated by Tambanco
//

import Foundation
import UIKit
import CoreData

// MARK: Output protocol
protocol FiatViewProtocol: AnyObject {
    func updateFiatView()
    func updateTotalView(totalValue: String?)
}

// MARK: Input protocol
protocol FiatPresenterProtocol: AnyObject {
    var fiatCurrenciesFromCoreData: [NSManagedObject] { get set }
    var totalValue: [NSManagedObject] { get set }
    var baseCurrency: String { get }
    var convertedCurrency: String? { get set }
    var fiatCalculator: FiatCalculatorProtocol! { get set }
    
    func showCurrencyView()
    func fetchCurrency()
    func removeCurrency(rowIndex: Int)
    
    init(router: RouterProtocol, view: FiatViewProtocol, networkService: NetworkServiceProtocol)
}

class FiatPresenter: FiatPresenterProtocol {
    var totalValue: [NSManagedObject] = []
    var fiatCurrenciesFromCoreData: [NSManagedObject] = []
    var fiatCalculator: FiatCalculatorProtocol! = FiatCalculator()
    var baseCurrency: String = "RUB"
    var convertedCurrency: String?
    
    weak var view: FiatViewProtocol?
    var router: RouterProtocol?
    var networkService: NetworkServiceProtocol?
    
    func fetchCurrency() {
        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }
        let managedContext = appDelegate.persistentContainer.viewContext
        let fetchRequest = NSFetchRequest<NSManagedObject>(entityName: "Currency")
        
        do {
            fiatCurrenciesFromCoreData = try managedContext.fetch(fetchRequest)
            DispatchQueue.main.async {
                let totalFiatValue = self.fiatCalculator.calculateTotalValue(values: self.fiatCurrenciesFromCoreData)
                self.view?.updateTotalView(totalValue: totalFiatValue)
                self.view?.updateFiatView()
            }
        } catch let error as NSError {
            print("Could not fetch. \(error.localizedDescription)")
        }
    }
    
    func removeCurrency(rowIndex: Int) {
        fiatCurrenciesFromCoreData.remove(at: rowIndex)
        DispatchQueue.main.async {
            self.view?.updateTotalView(totalValue: self.fiatCalculator.calculateTotalValue(values: self.fiatCurrenciesFromCoreData))
            self.view?.updateFiatView()
        }
    }
    
    func showCurrencyView() {
        router?.showCurrencyView()
    }
    
    required init(router: RouterProtocol, view: FiatViewProtocol, networkService: NetworkServiceProtocol) {
        self.view = view
        self.networkService = networkService
        self.router = router
    }
}
