//
//  FiatPresenter.swift
//  FiatMoneyCoin
//
//  Created tambanco ü•≥ on 28.06.2022.
//
//  Template generated by Tambanco
//

import Foundation
import UIKit
import CoreData

// MARK: Output protocol
protocol FiatViewProtocol: AnyObject {
    func updateFiatView()
    func updateTotalView(totalValue: String?)
    func showEditAlert(alert: UIAlertController)
}

// MARK: Input protocol
protocol FiatPresenterProtocol: AnyObject {
    var fiatCurrenciesFromCoreData: [NSManagedObject] { get set }
    var totalValue: [NSManagedObject] { get set }
    var baseCurrency: String { get }
    var convertedCurrency: String? { get set }
    var fiatCalculator: FiatCalculatorProtocol! { get set }
    var storageService: StorageService? { get set }
    
    func showCurrencyView()
    func fetchCurrency()
    func removeCurrency(rowIndex: Int)
    func editCurrencyValue(rowIndex: Int)
    
    init(router: RouterProtocol, view: FiatViewProtocol, networkService: NetworkServiceProtocol)
}

class FiatPresenter: FiatPresenterProtocol {
    var storageService: StorageService? = StorageService()
    var totalValue: [NSManagedObject] = []
    var fiatCurrenciesFromCoreData: [NSManagedObject] = []
    var fiatCalculator: FiatCalculatorProtocol! = FiatCalculator()
    var baseCurrency: String = "RUB"
    var convertedCurrency: String?
    
    weak var view: FiatViewProtocol?
    var router: RouterProtocol?
    var networkService: NetworkServiceProtocol?
    
    func fetchCurrency() {
        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }
        let managedContext = appDelegate.persistentContainer.viewContext
        let fetchRequest = NSFetchRequest<NSManagedObject>(entityName: "Currency")
        let fetchQueue = DispatchQueue.global(qos: .utility)
        fetchQueue.async {
            do {
                self.fiatCurrenciesFromCoreData = try managedContext.fetch(fetchRequest)
                let updatedTotalValue = self.fiatCalculator.calculateTotalValue(values: self.fiatCurrenciesFromCoreData)
                DispatchQueue.main.async {
                    self.view?.updateTotalView(totalValue: updatedTotalValue)
                    self.view?.updateFiatView()
                }
            } catch let error as NSError {
                print("Could not fetch. \(error.localizedDescription)")
            }
        }
    }
    
    func editCurrencyValue(rowIndex: Int) {
        let alert = UIAlertController(title: "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", message: nil, preferredStyle: .alert)
        alert.addTextField { alertTextField in
            let oldValue = self.fiatCurrenciesFromCoreData[rowIndex].value(forKey: "totalCurrency")
            alertTextField.placeholder = oldValue as? String
        }
        
        let editAction = UIAlertAction(title: "–ò–∑–º–µ–Ω–∏—Ç—å", style: .default) { action in
            let newTotalValue = alert.textFields?.first?.text
            self.fiatCurrenciesFromCoreData[rowIndex].setValue(newTotalValue, forKey: "totalCurrency")
            self.storageService?.updateTotalValue(update: self.fiatCurrenciesFromCoreData[rowIndex])
            let updatedTotalValue = self.fiatCalculator.calculateTotalValue(values: self.fiatCurrenciesFromCoreData)
            
            self.view?.updateFiatView()
            self.view?.updateTotalView(totalValue: updatedTotalValue)
        }
        
        let cancelAction = UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel, handler: nil)
        
        alert.addAction(editAction)
        alert.addAction(cancelAction)
        
        self.view?.showEditAlert(alert: alert)
        self.view?.updateFiatView()
    }
    
    func currencyConverter(amount: String?, symbol: String?) {
        guard symbol != nil else { return }
        let symbolToConvert = symbol!
        let currencyCode = String(symbolToConvert.prefix(3))
        networkService?.convertTwoCurrensies(from: currencyCode, to: baseCurrency, amount: amount ?? "", completion: { [weak self] result in
            guard let self = self else { return }
            DispatchQueue.main.async {
                switch result {
                case .success(let convertedValue):
                    self.convertedCurrency = convertedValue
                    self.storageService?.saveCurency(totalValue: self.newValueToSave,
                                                     convertedValue: self.convertedCurrency,
                                                     currencySymbol: self.newSymbolToSave)
                case .failure(let error):
                    print(error.localizedDescription)
                }
            }
        })
    }
    
    func removeCurrency(rowIndex: Int) {
        storageService?.removeCurrency(object: fiatCurrenciesFromCoreData[rowIndex])
        fiatCurrenciesFromCoreData.remove(at: rowIndex)
        DispatchQueue.main.async {
            let totalFiatValue = self.fiatCalculator.calculateTotalValue(values: self.fiatCurrenciesFromCoreData)
            self.view?.updateTotalView(totalValue: totalFiatValue)
            self.view?.updateFiatView()
        }
    }
    
    func showCurrencyView() {
        router?.showCurrencyView()
    }
    
    required init(router: RouterProtocol, view: FiatViewProtocol, networkService: NetworkServiceProtocol) {
        self.view = view
        self.networkService = networkService
        self.router = router
    }
}
