//
//  FiatViewController.swift
//  FiatMoneyCoin
//
//  Created tambanco ðŸ¥³ on 28.06.2022.
//
//  Template generated by Tambanco
//

import Foundation
import UIKit

class FiatViewController: UIViewController {
    private var dropShadow: DropShadowProtocol!
    private var gradientor: GradientProtocol!
    private var animator: AnimatorProtocol!
    private var hapticTouch: HapticFeedBackerProtocol!
    private let refreshControl = UIRefreshControl()
    
    var presenter: FiatPresenterProtocol!
    private var fiatTableView: UITableView!
    private var addNewFiatButton: UIButton!
    private var headerView: TableViewHeader!
    
    private var totalValue: String = "0"
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupNavigationBar()
        setupFiatTableView()
        setupAddButton()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        presenter.fetchCurrency()
        self.navigationController?.navigationBar.subviews.forEach {
                $0.clipsToBounds = false
            }
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        configureAddButton()
        configureMainView()
//        configureHeaderView()
    }
    
    private func configureHeaderView() {
        let colorOne = UIColor(hexString: "e96443")
        let colorTwo = UIColor(hexString: "904e95")
        let l = CAGradientLayer()
        l.frame = self.fiatTableView.tableHeaderView?.bounds ?? CGRect.zero
        l.colors = [colorOne.cgColor, colorTwo.cgColor]
        l.startPoint = CGPoint(x: 0, y: 0)
        l.endPoint = CGPoint(x: 1, y: 1)
        l.cornerRadius = 20
        self.fiatTableView.tableHeaderView?.layer.insertSublayer(l, at: 0)
    }
    
    private func configureMainView() {
        let colorOne = UIColor.systemGray5
        let colorTwo = UIColor.systemGray6
        let l = CAGradientLayer()
        l.frame = self.view.bounds
        l.colors = [colorOne.cgColor, colorTwo.cgColor]
        l.startPoint = CGPoint(x: 0, y: 0)
        l.endPoint = CGPoint(x: 1, y: 1)
        l.cornerRadius = 20
        view.layer.insertSublayer(l, at: 0)
        
    }
    
    private func configureAddButton() {
        let colorOne = UIColor(hexString: "e96443")
        let colorTwo = UIColor(hexString: "904e95")
        let l = CAGradientLayer()
        l.frame = addNewFiatButton.bounds
        l.colors = [colorOne.cgColor, colorTwo.cgColor]
        l.startPoint = CGPoint(x: 0, y: 0)
        l.endPoint = CGPoint(x: 1, y: 1)
        l.cornerRadius = l.bounds.width / 2
        addNewFiatButton.layer.insertSublayer(l, at: 0)
    }
    
    func setupFiatTableView() {
        fiatTableView = UITableView(frame: CGRect.zero)
        fiatTableView.register(FiatCell.self, forCellReuseIdentifier: FiatCell.reuseId)
        fiatTableView.delegate = self
        fiatTableView.dataSource = self
        fiatTableView.rowHeight = 100
        fiatTableView.separatorStyle = .none
        fiatTableView.backgroundColor = .clear
        
        refreshControl.attributedTitle = NSAttributedString(string: "")
        refreshControl.addTarget(self, action: #selector(self.refresh), for: .valueChanged)
        
        view.addSubview(fiatTableView)
        fiatTableView.addSubview(refreshControl)
        
        fiatTableView.snp.makeConstraints { make in
            make.leading.trailing.equalToSuperview()
            make.top.bottom.equalToSuperview()
        }
    }
    
    @objc func refresh() {
        self.fiatTableView.reloadData()
        presenter.fetchCurrency()
        refreshControl.endRefreshing()
    }
    
    private func setupAddButton() {
        var config = UIButton.Configuration.filled()
        config.baseBackgroundColor = .clear
        config.baseForegroundColor = .white
        config.image = UIImage(systemName: "plus", withConfiguration: UIImage.SymbolConfiguration(scale: .medium))
        addNewFiatButton = UIButton(configuration: config, primaryAction: UIAction() { _ in
            self.presenter.showCurrencyView()
        })
        
        view.addSubview(addNewFiatButton)
        addNewFiatButton.snp.makeConstraints { make in
            make.trailing.equalToSuperview().inset(40)
            make.bottom.equalTo(self.view.safeAreaLayoutGuide).inset(90)
            make.height.width.equalTo(50)
        }
        
        dropShadow = DropShadow(onView: addNewFiatButton)
    }
}

// MARK: - Bindings
extension FiatViewController: FiatViewProtocol {
    func showEditAlert(alert: UIAlertController) {
        self.present(alert, animated: true, completion: nil)
    }
    
    func updateTotalView(totalValue: String?) {
        self.totalValue = totalValue ?? "0"
    }
    
    func updateFiatView() {
        fiatTableView.reloadData()
    }
}

extension FiatViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter.fiatCurrenciesFromCoreData.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: FiatCell.reuseId, for: indexPath) as! FiatCell
        cell.currencyImage.image = UIImage(systemName: "dollarsign.circle.fill")
        cell.amountCurrency.text = presenter.fiatCurrenciesFromCoreData[indexPath.row].value(forKey: "totalCurrency") as? String
        cell.amountCurrencySymbol.text = presenter.fiatCurrenciesFromCoreData[indexPath.row].value(forKey: "currencySymbol") as? String
        cell.convertedValue.text = presenter.fiatCurrenciesFromCoreData[indexPath.row].value(forKey: "convertedValue") as? String
        cell.earnPercent.text = String("0" + " " + "%")
        return cell
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        headerView = TableViewHeader(frame: CGRect.zero)
        dropShadow = DropShadow(onView: headerView)
        headerView.totalLabel.text = "Ð¡ÑƒÐ¼Ð¼Ð°: \(totalValue)"
        headerView.cardView = getGradientBackgroundView()
        return headerView
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 150
    }
    
    private func getGradientBackgroundView() -> UIView {
      let gradientBackgroundView = UIView()

      // Prepare Gradient Layer
      let gradientLayer = CAGradientLayer()
      gradientLayer.frame.size = CGSize(width: self.fiatTableView.frame.size.width, height: 150)
      gradientLayer.startPoint = CGPoint(x: 0.0, y: 0.5)
      gradientLayer.endPoint = CGPoint(x: 1.0, y: 0.5)
      gradientLayer.colors = [UIColor.blue.cgColor, UIColor.green.cgColor]
      // Add layer to view
      gradientBackgroundView.layer.addSublayer(gradientLayer)
      return gradientBackgroundView
    }
    
    // MARK: - Cell manipulation
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        let config = UIImage.SymbolConfiguration(textStyle: .largeTitle)
        let trash = UIContextualAction(style: .normal,
                                       title: nil) { [weak self] (action, view, completionHandler) in
            self?.moveToTrash(index: indexPath.row)
            completionHandler(true)
        }
        trash.backgroundColor = .systemRed
        trash.image = UIImage(systemName: "trash.circle.fill", withConfiguration: config)
        
        let edit = UIContextualAction(style: .normal,
                                      title: nil) { [weak self] (action, view, completionHandler) in
            self?.editValue(index: indexPath.row)
        }
        
        edit.backgroundColor = .systemGray2
        edit.image = UIImage(systemName: "pencil.circle.fill", withConfiguration: config)
        let configuration = UISwipeActionsConfiguration(actions: [trash, edit])
        
        return configuration
    }
    
    func editValue(index: Int) {
        presenter.editCurrencyValue(rowIndex: index)
    }
    
    func moveToTrash(index: Int) {
        presenter.removeCurrency(rowIndex: index)
    }
}

// MARK: - NavBar
extension FiatViewController {
    private func setupNavigationBar() {
        let settingsButton = UIButton(frame: CGRect(x: 0, y: 0, width: 40, height: 40))
        navigationController?.navigationBar.backgroundColor = .clear
        let imageView = UIImageView()
        imageView.image = UIImage(systemName: "gearshape.fill")
        settingsButton.setImage(imageView.image, for: .normal)
        settingsButton.tintColor = UIColor.systemGray
        if let imageView = settingsButton.imageView {
            settingsButton.bringSubviewToFront(imageView)
        }
        
        dropShadow = DropShadow(onView: settingsButton)
        settingsButton.addTarget(self, action: #selector(settingsTapped), for: .touchUpInside)
        let rightBarButton = UIBarButtonItem(customView: settingsButton)
        self.navigationItem.rightBarButtonItems = [rightBarButton]
    }
    
    @objc private func settingsTapped() {
        print("foo")
    }
    
    @objc private func profileTapped() {
        print("profileTapped")
    }
}
