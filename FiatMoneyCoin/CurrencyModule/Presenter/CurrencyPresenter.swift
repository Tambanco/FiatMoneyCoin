//
//  CurrencyPresenter.swift
//  FiatMoneyCoin
//
//  Created tambanco ðŸ¥³ on 05.07.2022.
//
//  Template generated by Tambanco
//

import Foundation
import UIKit
import CoreData

// MARK: Output protocol
protocol CurrencyViewProtocol: AnyObject {
    func success()
    func failure(error: Error)
}
 
// MARK: Input protocol
protocol CurrencyPresenterProtocol: AnyObject {
    var newValueToSave: String? { get set }
    var newSymbolCodeToSave: String? { get set }
    
    var symbols: [String]? { get set }
    var storageService: StorageService? { get set }
    func saveToCoreData()
    func cancelAdding()
    init(router: RouterProtocol, view: CurrencyViewProtocol, networkService: NetworkServiceProtocol)
}

class CurrencyPresenter: CurrencyPresenterProtocol {
    var newValueToSave: String?
    var newSymbolCodeToSave: String?
    
    var newCurrencyForSave: [NSManagedObject] = []
    var storageService: StorageService? = StorageService()
    var symbols: [String]? = []
    
    weak var view: CurrencyViewProtocol?
    var router: RouterProtocol?
    var networkService: NetworkServiceProtocol?
    
    func saveToCoreData() {
        storageService?.saveToCoreData(newData: newValueToSave, entityName: "NewCurrency", key: "newValue")
        storageService?.saveToCoreData(newData: newSymbolCodeToSave, entityName: "NewCurrency", key: "newSymbolCode")
        router?.popToRoot()
    }
    
    func cancelAdding() {
        router?.popToRoot()
    }
    
    required init(router: RouterProtocol, view: CurrencyViewProtocol, networkService: NetworkServiceProtocol) {
        self.router = router
        self.view = view
        self.networkService = networkService
        
        getSymbols()
    }
    
    func getSymbols() {
        networkService?.getCurrencyList(completion: { [weak self] result in
            guard let self = self else { return }
            DispatchQueue.main.async {
                switch result {
                case .success(let symbols):
                    self.symbols = symbols
                    self.view?.success()
                case .failure(let error):
                    self.view?.failure(error: error)
                }
            }
        })
    }
}
